<ICD>
  <SystemReset name="" value="" />
  <Module name="sva_checker" DesignLang="Verilog" FileName="../sva/traffic.sva" LineNo="1">
    <ModuleVariant name="sva_checker"  CheckerModule="">
      <Property name="assert_no_both_green" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="16" MultiAutomata="1">
        <PropertySource><![CDATA[assert_no_both_green: assert property(@(posedge clk) (!(green_main && green_first)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_2_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_2_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_2_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_2_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_no_both_yellow" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="18" MultiAutomata="1">
        <PropertySource><![CDATA[assert_no_both_yellow: assert property(@(posedge clk) (!(yellow_main && yellow_first)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="yellow_main" />
          <PropertyLeaf signal="yellow_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_3_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_3_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_3_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_3_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_hazard_in_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="22" MultiAutomata="1">
        <PropertySource><![CDATA[assert_hazard_in_main: assert property(@(posedge clk) ((green_main || yellow_main) |-> red_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
          <PropertyLeaf signal="yellow_main" />
          <PropertyLeaf signal="red_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_4_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_4_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_4_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_4_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_4_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_4_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_hazard_in_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="24" MultiAutomata="1">
        <PropertySource><![CDATA[assert_hazard_in_first: assert property(@(posedge clk) ((green_first || yellow_first) |-> red_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_first" />
          <PropertyLeaf signal="yellow_first" />
          <PropertyLeaf signal="red_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_5_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_5_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_5_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_5_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_5_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_5_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_signal_sequencing_on_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="29" MultiAutomata="1">
        <PropertySource><![CDATA[assert_signal_sequencing_on_main: assert property(@(posedge clk) (yellow_main |=> (red_main [* 1:$]) ##1 (green_main [* 1:$]) ##1 yellow_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="yellow_main" />
          <PropertyLeaf signal="red_main" />
          <PropertyLeaf signal="green_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_6_states_0" rhs="5'b0" />
          <RegInitialization signal="_SVAC_6_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_6_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_6_states" rhs="3'b0" />
          <RegInitialization signal="_SVAC_6_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_6_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_6_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_6_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_signal_sequencing_on_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="31" MultiAutomata="1">
        <PropertySource><![CDATA[assert_signal_sequencing_on_first: assert property(@(posedge clk) (yellow_first |=> (red_first [* 1:$]) ##1 (green_first [* 1:$]) ##1 yellow_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="yellow_first" />
          <PropertyLeaf signal="red_first" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_7_states_0" rhs="5'b0" />
          <RegInitialization signal="_SVAC_7_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_7_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_7_states" rhs="3'b0" />
          <RegInitialization signal="_SVAC_7_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_7_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_7_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_7_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_green_no_waiting_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="35" MultiAutomata="1">
        <PropertySource><![CDATA[assert_green_no_waiting_first: assert property(@(posedge clk) ((((!waiting_main) && red_first) && waiting_first) |-> green_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_main" />
          <PropertyLeaf signal="red_first" />
          <PropertyLeaf signal="waiting_first" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_8_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_8_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_8_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_8_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_8_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_8_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_green_no_waiting_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="37" MultiAutomata="1">
        <PropertySource><![CDATA[assert_green_no_waiting_main: assert property(@(posedge clk) ((((!waiting_first) && red_main) && waiting_first) |-> green_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_first" />
          <PropertyLeaf signal="red_main" />
          <PropertyLeaf signal="green_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_9_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_9_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_9_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_9_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_9_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_9_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_honor_waiting_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="42" MultiAutomata="1">
        <PropertySource><![CDATA[assert_honor_waiting_main: assert property(@(posedge clk) ($rose(waiting_main) |-> ( ##[0:(MAX_WAIT)] green_main)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_main" />
          <PropertyLeaf signal="green_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_10_states_0" rhs="4'b0" />
          <RegInitialization signal="_SVAC_10_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_10_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_10_states" rhs="4'b0" />
          <RegInitialization signal="_SVAC_10_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_10_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_10_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_10_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_honor_waiting_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="44" MultiAutomata="1">
        <PropertySource><![CDATA[assert_honor_waiting_first: assert property(@(posedge clk) ($rose(waiting_first) |-> ( ##[0:(MAX_WAIT)] green_first)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_first" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_11_states_0" rhs="4'b0" />
          <RegInitialization signal="_SVAC_11_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_11_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_11_states" rhs="4'b0" />
          <RegInitialization signal="_SVAC_11_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_11_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_11_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_11_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_gyr_oh_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="48" MultiAutomata="1">
        <PropertySource><![CDATA[assert_gyr_oh_first: assert property(@(posedge clk) $onehot({green_first, red_first, yellow_first}));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_first" />
          <PropertyLeaf signal="red_first" />
          <PropertyLeaf signal="yellow_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_12_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_12_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_12_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_12_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_gyr_oh_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="50" MultiAutomata="1">
        <PropertySource><![CDATA[assert_gyr_oh_main: assert property(@(posedge clk) $onehot({green_main, red_main, yellow_main}));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
          <PropertyLeaf signal="red_main" />
          <PropertyLeaf signal="yellow_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_13_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_13_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_13_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_13_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_state_oh_first" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="54" MultiAutomata="1">
        <PropertySource><![CDATA[assert_state_oh_first: assert property(@(posedge clk) $onehot(state_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="state_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_14_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_14_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_14_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_14_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assert_state_oh_main" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="56" MultiAutomata="1">
        <PropertySource><![CDATA[assert_state_oh_main: assert property(@(posedge clk) $onehot(state_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="state_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_15_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_15_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_15_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_15_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assume_continuous_waiting_main" type="assume" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="63" MultiAutomata="1">
        <PropertySource><![CDATA[assume_continuous_waiting_main: assume property(@(posedge clk) ((waiting_main && (~green_main)) |=> waiting_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_main" />
          <PropertyLeaf signal="green_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_16_states_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_16_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_16_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_16_states" rhs="1'b0" />
          <RegInitialization signal="_SVAC_16_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_16_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_16_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_16_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="assume_continuous_waiting_first" type="assume" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="65" MultiAutomata="1">
        <PropertySource><![CDATA[assume_continuous_waiting_first: assume property(@(posedge clk) ((waiting_first && (~green_first)) |=> waiting_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_first" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_17_states_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_17_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_17_ended_reg_1" rhs="1'b0" />
          <RegInitialization signal="_SVAC_17_states" rhs="1'b0" />
          <RegInitialization signal="_SVAC_17_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_17_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="vacuityEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_17_ended_reg_1" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_17_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_both_red" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="69" MultiAutomata="1">
        <PropertySource><![CDATA[cov_both_red: cover property(@(posedge clk) (red_main && red_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="red_main" />
          <PropertyLeaf signal="red_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_18_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_18_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_waiting_on_both_streets_for_max_wait" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="71" MultiAutomata="1">
        <PropertySource><![CDATA[cov_waiting_on_both_streets_for_max_wait: cover property(@(posedge clk) ((waiting_first && waiting_main) [* MAX_WAIT]));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="waiting_first" />
          <PropertyLeaf signal="waiting_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_19_states" rhs="3'b0" />
          <RegInitialization signal="_SVAC_19_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_19_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_main_for_one_cycle" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="73" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_main_for_one_cycle: cover property(@(posedge clk) $rose(green_main) ##1 $fell(green_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_20_states" rhs="1'b0" />
          <RegInitialization signal="_SVAC_20_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_20_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_first_for_one_cycle" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="75" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_first_for_one_cycle: cover property(@(posedge clk) $rose(green_first) ##2 $fell(green_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_21_states" rhs="2'b0" />
          <RegInitialization signal="_SVAC_21_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_21_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_with_waiting_on_main" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="77" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_with_waiting_on_main: cover property(@(posedge clk) ($rose(green_main) && waiting_main));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
          <PropertyLeaf signal="waiting_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_22_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_22_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_with_waiting_on_first" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="79" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_with_waiting_on_first: cover property(@(posedge clk) ($rose(green_first) && waiting_first));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_first" />
          <PropertyLeaf signal="waiting_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_23_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_23_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_without_waiting_on_main" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="81" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_without_waiting_on_main: cover property(@(posedge clk) ($rose(green_main) && (!waiting_main)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_main" />
          <PropertyLeaf signal="waiting_main" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_24_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_24_ended_reg" />
        </PropertyEncoding>
      </Property>
      <Property name="cov_green_without_waiting_on_first" type="cover" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../sva/traffic.sva" LineNo="83" MultiAutomata="1">
        <PropertySource><![CDATA[cov_green_without_waiting_on_first: cover property(@(posedge clk) ($rose(green_first) && (!waiting_first)));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="green_first" />
          <PropertyLeaf signal="waiting_first" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_25_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_25_ended_reg" />
        </PropertyEncoding>
      </Property>
      <VariantInstance name="traffic.chk" FileName="../sva/bind_traffic.sva" LineNo="2">
      </VariantInstance>
    </ModuleVariant>
  </Module>
  <Module name="vlog_street_ctrl_fsm" DesignLang="Verilog" FileName="../design/vlog_street_ctrl_fsm.v" LineNo="1">
    <ModuleVariant name="vlog_street_ctrl_fsm"  CheckerModule="">
      <Property name="oh_state_out" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../design/vlog_street_ctrl_fsm.v" LineNo="104" MultiAutomata="1">
        <PropertySource><![CDATA[oh_state_out: assert property(@(posedge clk) disable iff (rst) $onehot(state_out));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <DisableIff>
          <DisableIffSignal signal="rst" />
        </DisableIff>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="state_out" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_1_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_1_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_1_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_1_ended_reg" />
        </PropertyEncoding>
      </Property>
      <VariantInstance name="traffic.main" FileName="../design/traffic.v" LineNo="18">
      </VariantInstance>
    </ModuleVariant>
    <ModuleVariant name="vlog_street_ctrl_fsm_0000"  CheckerModule="">
      <Property name="oh_state_out" type="assert" kind="concurrent" InFunction="0" HasLocalVars="0" PropLang="SVA" FileName="../design/vlog_street_ctrl_fsm.v" LineNo="104" MultiAutomata="1">
        <PropertySource><![CDATA[oh_state_out: assert property(@(posedge clk) disable iff (rst) $onehot(state_out));

]]></PropertySource>
        <Clock>
        <ClockSignal signal="clk" />
        </Clock>
        <DisableIff>
          <DisableIffSignal signal="rst" />
        </DisableIff>
        <PropertyLeafs> 
          <PropertyLeaf signal="clk" />
          <PropertyLeaf signal="state_out" />
        </PropertyLeafs> 
        <RegInitializations> 
          <RegInitialization signal="_SVAC_26_ended_reg_0" rhs="1'b0" />
          <RegInitialization signal="_SVAC_26_ended_reg" rhs="1'b0" />
        </RegInitializations> 
        <PropertyEncoding type="Deterministic" kind="negativeAlways" IsTautology="0" >
          <EndedSignal signal="_SVAC_26_ended_reg_0" />
        </PropertyEncoding>
        <PropertyEncoding type="Deterministic" kind="positiveEventually" IsTautology="0" >
          <EndedSignal signal="_SVAC_26_ended_reg" />
        </PropertyEncoding>
      </Property>
      <VariantInstance name="traffic.first" FileName="../design/traffic.v" LineNo="30">
      </VariantInstance>
    </ModuleVariant>
  </Module>
</ICD>
